#!/bin/bash
#
#
#    _____________  ________   ____
#   /  ___/  _ \  \/ /\____ \ /    \
#   \___ (  <_> )   / |  |_> >   |  \
#  /____  >____/ \_/  |   __/|___|  /
#       \/            |__|        \/
#              --- version 0.3a ---
#
#
#   [ Overview ]
#
#       A CLI vpn connection handler.
#
#



    #
    #   command(s)
    #
    mkdir='mkdir'
    echo='echo'
    exit='exit'
    find='find'
    openvpn='openvpn'
    tail='tail'
    tree='tree'


    #
    #   default(s)
    #
    script_dir=$(dirname $0);
    script_name='sovpn'
    script_path=$0
    script_wkg="$HOME/.config/sovpn"
    script_wkg_vpn="$script_wkg/vpn"


    #
    #   global(s)
    #
    global_vpn=


    #
    #   function(s)
    #

        #
        # cmd_connect - determine configuration type
        #
        function cmd_connect() {

            # arg
            [ -z "$global_vpn" ]                            &&  \
                display_error "No vpn specified"            &&  \
                $exit 2

            # disect
            filename=$( basename $global_vpn )
            extension="${filename##*.}"

            # connect
            case "$extension" in
                ovpn)   cmd_connect_openvpn
                        ;;
            esac

            # display
            display_msg "Created new session from '$global_vpn'"

            # return
            return 0

        }

        #
        # cmd_connect_openvpn - create a new connection w/ openvpn using "$global_vpn" config
        #
        function cmd_connect_openvpn() {

            # arg
            [ -z "$global_vpn" ]                            &&  \
                display_error "No vpn specified"            &&  \
                $exit 2

            # connect
            $openvpn --config "$script_wkg_vpn/$global_vpn"

            # return
            return 0

        }

        #
        # cmd_list - tree vpn folder
        #
        function cmd_list() {
            $echo "| $script_name"
            $tree -d -C -l --noreport "$script_wkg_vpn" | \
                $tail -n +2
        }
        # reference: /usr/bin/pass, aka 'password-store'

        #
        # display_error
        #
        function display_error() {
            $echo "Error: $1."
        }

        #
        # display_msg
        #
        function display_msg() {
            $echo "$1."
        }

        #
        #
        # display_usage
        #
        function display_usage() {
            $echo "$script_name usage: $script_name [list|connect|attach|disconnect] vpn"
        }

        #
        # set_vpn - searches wkg for "$1" and sets vpn config path as "$global_vpn".
        #
        function set_vpn() {

            # arg
            [ -z "$1" ]                                     &&  \
                display_error "vpn path required"           &&  \
                display_usage                               &&  \
                $exit 2

            # find
            global_vpn=$(cd "$script_wkg_vpn" && $find . ! -path '*/\.*' -name "*config*" | sort | grep -i $1 | head -1)

            # check
            [ -z "$global_vpn" ]                            &&  \
                display_error "no vpn found matching '$1'"  &&  \
                display_usage                               &&  \
                $exit 2

            # return
            return 0

        }

    #
    #   function(s)
    #   -- end
    #


    #
    #   logic
    #

        # create working
        if [ ! -d "$script_wkg_vpn" ]; then
            $mkdir -p "$script_wkg_vpn"
            if [ $? -ne 0 ]; then
                $exit 2
            fi
        fi

        # arg
        if [ $# -eq 0 ]; then
            display_usage
            $exit 2
        fi

        # function
        case "$1" in
            connect|-c)
                shift
                set_vpn "$1"
                shift
                cmd_connect "$@"
                ;;
            list|-l)
                shift
                cmd_list
                ;;
            *)
                display_usage
                ;;
        esac

    #
    #   logic
    #   -- end
    #



#
#   ^(-.-)> --- pew pew
#
